 嗯.大家好，我準備開始全新系列的 node.js 教學. 許多人一直要求我. 所以我終於決定要做了. 我將會從非常簡單的基礎開始. 我們將會使用 node.js 製作應用程式. 不過，首先在這個第一部視頻裡 我們先要瞭解 node.js 是什麼. 瀏覽器的 Js 和  node.js 之間的不同. 瞭解應用程式相關的知識，爲什麼使用 node.js. 在開始寫代碼前，必須先瞭解. 現在正是時候學 node.js. 它在 GitHub 擁有最多的關注. 你會發現，最多人開發的套件，使用的是 node.js. 如果你是前端開發者，並且想成爲全端開發者. node.js 是最好的選擇，因爲根本來說它就是 js. 如果你已經會瀏覽器的 js 那麼你也可以簡單的學會 node.js. 因爲它就是 js 如果你已經會 Js ，那麼對你來說只是小菜一碟 歡迎來到 techsith 教學系列. 如何定義 node.js 你可以說它是伺服端的 js. 它是執行時期環境，不過是執行在瀏覽器之外. 它是被有個叫 Ryan Dahl 的傢伙所創造出來. 基本上他把 js 引擎 「V8」從瀏覽器裏取出. 並且把它建造爲適合伺服端的開發程序. 除了 V8 還有其它的 js 引擎，像是 FireFox 的 spider monkey. safari 也有她自己的 js 引擎. chakra 是 MS Edges 的 js 引擎. V8 則是 Google 打造的 Js 引擎. 引擎基本上做的事情就是把 js 代碼轉成機器碼. 所以 node.js 和 瀏覽器的 js 差在哪. 在瀏覽器裏有 document 物件模型，所以你有 DOM、BOM 來幫助你操作瀏覽器. 在伺服端，沒有 DOM、BOM. 沒有瀏覽器相關的東西. 伺服端有的是，檔案，所以你可以做的. IO 操作. 你可以讀取寫入檔案 相關的所有操作 假如有資料庫 可以存取資料庫，像是 Xpress. 你可以做任何像是其它腳本語言做的事，像是 Python. 所以爲何選擇 node.js. node.js 是 non-blocking，那什麼是 non-blocking？ 如果有什麼地方需要你去等待返回結果. 它不會停在那個地方等待. 以網頁來說. 當載入網頁的 DOM 的時候. 可能有些 Promises 需要從伺服器取得資料. 它會跳過，不會停在那等待資料. 繼續做接下來的事，直到取得資料才會跳回處理執行. 這是非常重要的特性. 它做法有效率、快速 不浪費時間和記憶體. 所以在單線程裏，可以做很多事 有許多其它的多線程程序 但我們晚點再說 總結說 node.js 是單線程和 non-blocking. 現在我們來看應用程式， node.js 可以做什麼 你可以做許多事. 許多自動化工作   執行腳本工作    .        .   建造 rest api. websockets node.js 擁有衆多開發社羣 任何你想做的，幾乎都有相關的套件可以使用. 這是非常棒的事 你可以做桌面程式，使用  electron. 以上是大致 node 的介紹. 來談談如何安裝 node. 這是第一個步驟 你大概已經安裝了 node.js. 讓我提醒你. 當你建立應用程式，或許需要使用不同版本的 node.js. 你必須能夠切換不同 node 版本     下個視頻，我將會說明如何正確的安裝 node   瞭解不同版本. 如何安裝 如何操作指令. 如我先前所說將會是一個教學系列 我會建立清單鏈接 你可以追蹤這個系列. 請多分享視頻給任何需要的人  .   因爲分享是關心，分享知識給你們. 所以我做教學分享，你分享給他人  . 最初我想做課程放在 Udemy   後來我決定把它免費. 我或許會在 Udemy 製作一些課程，這是我今年的目標   如果有，我會讓你們知道 希望你們能享受這個系列 從中學到東西 請按喜歡 、訂閱鈕、友善留言   我一直尋找可以幫忙翻譯的人  . 在說明欄有相關訊息. 請隨意的聯絡我 謝謝